// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username, password, email 
) VALUES (
  $1, $2, $3 
) RETURNING id, username, password, email, follower_count, following_count
`

type CreateUserParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
	Email    string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Password, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.FollowerCount,
		&i.FollowingCount,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, username, password, email, follower_count, following_count FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.FollowerCount,
		&i.FollowingCount,
	)
	return i, err
}

const incrementFollowerCount = `-- name: IncrementFollowerCount :exec
UPDATE users
SET follower_count = follower_count + 1
WHERE id = $1
`

func (q *Queries) IncrementFollowerCount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, incrementFollowerCount, id)
	return err
}

const incrementFollowingCount = `-- name: IncrementFollowingCount :exec
UPDATE users
SET following_count = following_count + 1
WHERE id = $1
`

func (q *Queries) IncrementFollowingCount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, incrementFollowingCount, id)
	return err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, password, email, follower_count, following_count FROM users
ORDER BY username
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.Email,
			&i.FollowerCount,
			&i.FollowingCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const logIn = `-- name: LogIn :one
SELECT id, username, password, email, follower_count, following_count FROM users 
WHERE username  = $1 AND password = $2 LIMIT 1
`

type LogInParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) LogIn(ctx context.Context, arg LogInParams) (User, error) {
	row := q.db.QueryRowContext(ctx, logIn, arg.Username, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.FollowerCount,
		&i.FollowingCount,
	)
	return i, err
}
